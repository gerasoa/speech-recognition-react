https://www.youtube.com/watch?v=r3tiBJagbic


import React, { useState } from 'react';
import '../App.css';
import { Blog } from './Blog';
import { Contact } from './Contact';
import { Home } from './Home';
import { NewBlogPost } from './NewBlogPost';
import { Link, Route, Routes, Navigate } from 'react-router-dom';

import SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';
import { createSpeechlySpeechRecognition } from 'speech-recognition-polyfill';

const appId = '390920e1-a155-45cf-89f1-333f740ef5ed';
const SpeechlySpeechRecognation = createSpeechlySpeechRecognition(appId);
SpeechRecognition.applyPolyfill(SpeechlySpeechRecognation);


function App() {
  // const navigate = Navigate();
  
  const commands = [
    /*{ command: 'hello', callback: () => alert('Hello!') },
    { command: 'goodbye', callback: () => alert('Goodbye!') },
    { command: 'good bye', callback: () => alert('Good bye!') },
    { command: 'Hi', callback: () => alert('Hi!') },*/
      {
        //comand: ['Go to *', 'Open *'],
        command: ['Go to *', 'Open *'],
        callback: (redirectPage) => setRedirectUrl(redirectPage),
      },   
  ]; 
   
   const {
    transcript
    //interimTranscript,
    //finalTranscript,
    //resetTranscript,
    //listening, 
   // browserSupportSpeechRecognition
  } = useSpeechRecognition({ commands });
  const [redirectUrl, setRedirectUrl] = useState('');
  
   //const { transcript } = useSpeechRecognition(  );   

   //const { browserSupportSpeechRecognition } = useSpeechRecognition();
   
   console.log(transcript);

   const pages = ['home', 'blog', 'new blog post', 'contact'];
   const urls = {
      home: '/',
      blog: '/blog',
      'new blog post': '/blog/new',
      contact:'/contact'
   }
   
   let redirect = '';
   
   console.log('redirectUrl: ' + redirectUrl);
   if(redirectUrl){
    if(pages.includes(redirectUrl)) {
      console.log('redirectUrl_ok');
      //redirect = <p>falhou</p> ; //navigate(urls[redirectUrl]);
      //redirect = redirect(urls[redirectUrl])
    } else {
      console.log('erro');
      //redirect = <p>Could not find page {redirectUrl}</p>;
    }
   }

  //const { listening, browserSupportSpeechRecognition } = useSpeechRecognition();
  //const startListening = () => SpeechRecognition.startListening({ continuous: true });






  function isMicrophoneAvailable() {
    return navigator.mediaDevices.getUserMedia({ audio: true })
      .then(() => true)
      .catch(() => false);
  } 
  function isBrowserSupportsContinuousListening(){
    if (useSpeechRecognition.browserSupportsContinuousListening) {
      SpeechRecognition.startListening({ continuous: true })
    } else {
      // Fallback behaviour
    }
  }

  return (
    <div>

      <div id='links'>
        <Link to="/">Home</Link>
        <Link to="/blog">Blog</Link>
        <Link to="/blog/new">Add Blog Post</Link>
        <Link to="/Contact">Contact</Link>
      </div>

      <Routes>
        <Route exact path='/' element={<Home />} />
        <Route path='/home' element={<Home />} />
        <Route exact path='/blog' element={<Blog />} />
        <Route path='/blog/new' element={<NewBlogPost />} />
        <Route path='/contact' element={<Contact />} />
      </Routes>

      {redirect}
      
      {/*<p>Browser support Microphone: {browserSupportSpeechRecognition ? 'yes' : 'no'} </p> */}

      <p>Microphone Available: {isMicrophoneAvailable ? 'yes' : 'no'} </p>

      <p>Browser Supports Continuous Listening: {useSpeechRecognition.browserSupportsContinuousListening ? 'yes' : 'no'} </p>
     <br></br>

      <p id='transcript'>transcript: {transcript}</p>
      <button onClick={SpeechRecognition.startListening}>Start</button>
    </div >

  );
}

export default App;
